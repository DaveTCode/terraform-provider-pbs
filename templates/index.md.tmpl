---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{ .ProviderShortName }} Provider"
description: |-
  The PBS provider enables infrastructure-as-code management of Altair PBS (Portable Batch System) configurations. This provider offers a Terraform interface for managing PBS resources such as queues, compute nodes, custom resources, hooks, and server attributes through the PBS `qmgr` command-line interface.
---

# {{ .ProviderShortName }} Provider

The PBS provider enables infrastructure-as-code management of [Altair PBS](https://www.altair.com/pbs-professional/) (Portable Batch System) configurations. This provider offers a Terraform interface for managing PBS resources such as queues, compute nodes, custom resources, hooks, and server attributes through the PBS `qmgr` command-line interface.

## Features

The provider supports the following PBS resources:

- **Queues**: Create, read, update, and delete PBS queues with full configuration management
- **Compute Nodes (vNodes)**: Manage virtual nodes including resource assignments and properties  
- **Custom Resources**: Define and manage custom PBS resources for specialized workloads
- **Hooks**: Configure PBS hooks for job lifecycle events and system automation
- **Server Attributes**: Manage PBS server-level configuration attributes

All resources support both resource management (create/update/delete operations) and data source functionality (read-only access to existing configurations).

## Authentication

The provider supports two authentication methods for connecting to PBS servers:

1. **Password Authentication**: Traditional username/password authentication
2. **SSH Private Key Authentication**: Key-based authentication using SSH private keys  
3. **Dual Authentication**: Both methods can be configured simultaneously for fallback scenarios

Authentication credentials can be provided through provider configuration or environment variables for enhanced security in production environments.

## Example Usage

```terraform
# Configuration-based authentication with password
provider "{{ .ProviderShortName }}" {
  server   = "10.10.10.10"
  sshport  = 22
  username = "root"
  password = "password"
}

# Configuration-based authentication with SSH private key (using file function)
provider "{{ .ProviderShortName }}" {
  server          = "10.10.10.10"
  sshport         = 22
  username        = "root"
  ssh_private_key = file("~/.ssh/id_rsa")
}

# Configuration-based authentication with both methods (fallback)
provider "{{ .ProviderShortName }}" {
  server          = "10.10.10.10"
  sshport         = 22
  username        = "root"
  password        = var.pbs_password
  ssh_private_key = file(var.ssh_key_path)
}

# Environment-based authentication (recommended for production)
provider "{{ .ProviderShortName }}" {
  # All configuration read from environment variables:
  # PBS_SERVER, PBS_SSH_PORT, PBS_USERNAME
  # PBS_PASSWORD (for password auth) or PBS_SSH_PRIVATE_KEY (for key auth)
}

# Using variables for all configuration
provider "{{ .ProviderShortName }}" {
  server          = var.pbs_server
  sshport         = var.pbs_ssh_port
  username        = var.pbs_username
  password        = var.pbs_password        # Optional: for password auth
  ssh_private_key = var.pbs_ssh_private_key # Optional: for SSH key auth
}
```

## Environment Variables

The following environment variables can be used to configure the provider:

| Environment Variable | Description | Required |
|---------------------|-------------|----------|
| `PBS_SERVER` | The PBS server hostname or IP address | Yes |
| `PBS_SSH_PORT` | The SSH port for connecting to the PBS server (default: 22) | No |
| `PBS_USERNAME` | SSH username with PBS admin privileges | Yes |
| `PBS_PASSWORD` | Password for SSH authentication | No* |
| `PBS_SSH_PRIVATE_KEY` | SSH private key content for key-based authentication | No* |

*Either `PBS_PASSWORD` or `PBS_SSH_PRIVATE_KEY` must be provided for authentication.

## Security Considerations

- **Production Environments**: Use environment variables or external credential management systems instead of hardcoding credentials in Terraform configurations
- **SSH Keys**: When using SSH key authentication, store private keys securely and use the `file()` function to read them from disk
- **Network Security**: Ensure PBS servers are accessible only from trusted networks and consider using VPN or bastion hosts for additional security
- **Privilege Management**: Use dedicated service accounts with minimal required privileges for PBS management operations

{{ .SchemaMarkdown }}
